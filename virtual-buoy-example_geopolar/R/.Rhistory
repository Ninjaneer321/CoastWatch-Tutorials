knitr::opts_chunk$set(
echo = TRUE,
fig.path = "images/"
)
# geom_hline(yintercept = 0, color = "red") +
labs(x = "Fitted Values", y = "Residuals", title = "Residual Plot") +
theme(plot.title=element_text(hjust=0.5))
knitr::opts_chunk$set(
echo = TRUE,
fig.path = "images/"
)
# Function to check if pkgs are installed, and install any missing pkgs
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE,repos='http://cran.us.r-project.org')
if(!require(x,character.only = TRUE)) stop(x, " :Package not found")
}
}
# Create list of required packages
list.of.packages <- c("utils", "ggplot2", "dplyr", "lubridate")
# Create list of installed packages
pkges = installed.packages()[,"Package"]
# Install and load all required pkgs
for (pk in list.of.packages) {
pkgTest(pk)
}
# Set ERDDAP data request URL
buoy_url <- "https://coastwatch.pfeg.noaa.gov/erddap/tabledap/cwwcNDBCMet.csv?time%2Clongitude%2Clatitude%2Cwtmp&station%3E=%2246259%22&station%3C=%2246259%22&time%3E=2020-08-16T00%3A00%3A00Z&time%3C=2022-08-16T17%3A52%3A00Z"
# Set file name
fname = 'buoy.csv'
# Download file
download.file(buoy_url, fname)
# Read into data frame, skip first 2 rows that contain variable names and units
buoy_df <- read.csv(fname, skip=2, header=TRUE)
# Name the columns
names(buoy_df) <- c("utc", "lon", "lat", "sst" )
# Add additional date column
buoy_df$date <- as.Date(buoy_df$utc, tz = "UTC")
# Show the first 3 rows
head(buoy_df, 3)
# Set file name
fname = 'sst.csv'
# Download file
download.file(url, fname)
# Read into data frame, skip first 2 rows that contain variable names and units
sst_df <- read.csv(fname, skip=2, header=TRUE)
names(sst_df) <- c("utc", "lat", "lon", "sst")
# Add formatted data column
sst_df$date <- as.Date(sst_df$utc, tz = "UTC")
# Show the first 3 rows
head(sst_df, 3)
# Filter data that are within the valid range (-2 and 45)
sst_df_clean = sst_df %>%
filter(sst >=-2 & sst <= 45)
## Visualize SST data from the Satellite Data
```{r}
# Aggregating (taking a mean value) grouped by day
buoy_ds <- buoy_df %>%
group_by(date = floor_date(date, unit="days")) %>%
summarise(mean_sst = mean(sst))
# Show first 3 rows
head(buoy_ds, 3)
# Remove outliers sst values outside of -2 and 45 deg C
buoy_ds_clean = buoy_ds %>%
filter(mean_sst >=-2 & mean_sst <= 45)
# Plot daily mean sst
ggplot(buoy_ds_clean, aes(x = date, y = mean_sst)) +
geom_line(color='blue') +
geom_point(size=.5, color='red')+
theme(axis.text.x = element_text(angle = 90),plot.title=element_text(hjust=0.5))+
labs(x="Date", y="Sea Surface Temp (Celcius)", title="2022 Aug- 2023 Aug Downsampled Buoy SST")
# Combine two data frames with date column where dates exist in both data frame
merged_df <- inner_join(sst_df_clean[c("date", "sst")],  buoy_ds_clean, by = "date")
# Plot satellite sst and buoy daily mean sst
p <- ggplot(merged_df, aes(x = date)) +
geom_line(aes(y = sst, color = "Satellite")) +
geom_line(aes(y = mean_sst, color = "NDBC Buoy")) +
scale_color_manual(name = "Data source",
values = c("Satellite" = "blue", "NDBC Buoy" = "orange"))+
labs( x = "Date", y = "Temperature (in Celcius)", title="SST from Satellite and NDBC Buoy" )+
theme(axis.text.x = element_text(angle = 0),plot.title=element_text(hjust=0.5))
p
Y_predicted=results.predict(X1_b)
ggplot(data=merged_df) +
#  geom_point(aes(x = model$fitted.values, y = model$residuals), size=0.8) +
geom_point(aes(x =  mean_sst, y= sst))+
# geom_hline(yintercept = 0, color = "red") +
labs(x = "Fitted Values", y = "Residuals", title = "Residual Plot") +
theme(plot.title=element_text(hjust=0.5))
ggplot(data=merged_df) +
#  geom_point(aes(x = model$fitted.values, y = model$residuals), size=0.8) +
geom_point(aes(x =  mean_sst, y= sst))+
geom_line(aes(x=mean_sst, model$fitted.values))+
# geom_hline(yintercept = 0, color = "red") +
labs(x = "Fitted Values", y = "Residuals", title = "Residual Plot") +
theme(plot.title=element_text(hjust=0.5))
predict <- model(x)
# Run linear regression
model <- lm(mean_sst ~ sst, data = merged_df)
predict(model, merged_df(x))
predict(model, merged_df(x))
merged_df
predict(model, merged_df$mean_sst)
model.predict(merged_df$sst)
predict
??predict
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point() +                      # Plot the data points
geom_smooth(method="lm", se=FALSE)
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point(color="grey") +                      # Plot the data points
geom_smooth(method="lm", se=FALSE)
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point(color="dark grey") +                      # Plot the data points
geom_smooth(method="lm", se=FALSE)
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point(color="black", size=1) +                      # Plot the data points
geom_smooth(method="lm", se=FALSE)
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point(color="black", size=1) +                      # Plot the data points
geom_smooth(method="lm", se=FALSE) +
labs(x = "Buoy", y = "Satellite", title = "Satellite vs Buoy data with regression line") +
theme(plot.title=element_text(hjust=0.5))
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point(color="black", size=1) +                      # Plot the data points
geom_smooth(method="lm", se=FALSE) +
labs(x = "SST from Buoy", y = "SST from Satellite", title = "Satellite vs Buoy data with regression line") +
theme(plot.title=element_text(hjust=0.5))
ggplot(merged_df, aes(x=sst, y=mean_sst)) +
geom_point(color="black") +                      # Plot the data points
geom_smooth(method="lm", se=FALSE) +
labs(x = "SST from Buoy", y = "SST from Satellite", title = "Satellite vs Buoy data with regression line") +
theme(plot.title=element_text(hjust=0.5))
